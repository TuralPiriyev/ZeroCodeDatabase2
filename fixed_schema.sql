-- Fixed exported schema generated by automated refactor tool
-- Database header (added by exporter)
CREATE DATABASE [EXPORTED_DB_20250912_000000];
GO
USE [EXPORTED_DB_20250912_000000];
GO

/*
  Notes:
  - Converted VARCHAR -> NVARCHAR
  - DATETIME -> DATETIME2
  - Added IDENTITY(1,1) for INT PRIMARY KEY without identity
  - Unquoted DEFAULT function calls
  - Added CHECK constraints for stock/price/quantity fields
  - Created computed column OrderItems.LineTotal and trigger to maintain Orders.TotalAmount
  - Fixed FK directions and added indexes
*/

SET ANSI_NULLS ON;
SET QUOTED_IDENTIFIER ON;
GO

-- Table: Customers
CREATE TABLE dbo.Customers (
  CustomerId INT PRIMARY KEY IDENTITY(1,1),
  FirstName NVARCHAR(255) NOT NULL,
  LastName NVARCHAR(255) NOT NULL,
  Email NVARCHAR(320) NULL,
  CreatedAt DATETIME2 DEFAULT GETDATE()
);
GO

-- Unique index on Email when not null
CREATE UNIQUE INDEX UX_Customers_Email ON dbo.Customers(Email) WHERE Email IS NOT NULL;
GO

-- Table: Categories
CREATE TABLE dbo.Categories (
  CategoryId INT PRIMARY KEY IDENTITY(1,1),
  Name NVARCHAR(255) NOT NULL
);
GO

-- Table: Products
CREATE TABLE dbo.Products (
  ProductId INT PRIMARY KEY IDENTITY(1,1),
  Name NVARCHAR(500) NOT NULL,
  CategoryId INT NULL,
  Price DECIMAL(18,2) NOT NULL DEFAULT (0),
  StockQty INT NOT NULL DEFAULT (0) CHECK (StockQty >= 0)
);
GO

-- Indexes for FK columns
CREATE INDEX IX_Products_CategoryId ON dbo.Products(CategoryId);
GO

-- Table: Orders
CREATE TABLE dbo.Orders (
  OrderId INT PRIMARY KEY IDENTITY(1,1),
  CustomerId INT NOT NULL,
  OrderDate DATETIME2 DEFAULT GETDATE(),
  TotalAmount DECIMAL(18,2) NOT NULL DEFAULT (0)
);
GO

CREATE INDEX IX_Orders_CustomerId ON dbo.Orders(CustomerId);
GO

-- Table: OrderItems
CREATE TABLE dbo.OrderItems (
  OrderItemId INT PRIMARY KEY IDENTITY(1,1),
  OrderId INT NOT NULL,
  ProductId INT NOT NULL,
  Quantity INT NOT NULL DEFAULT (1) CHECK (Quantity > 0),
  UnitPrice DECIMAL(18,2) NOT NULL DEFAULT (0),
  LineTotal AS (Quantity * UnitPrice) PERSISTED
);
GO

CREATE INDEX IX_OrderItems_OrderId ON dbo.OrderItems(OrderId);
CREATE INDEX IX_OrderItems_ProductId ON dbo.OrderItems(ProductId);
GO

-- Table: Payments
CREATE TABLE dbo.Payments (
  PaymentId INT PRIMARY KEY IDENTITY(1,1),
  OrderId INT NOT NULL,
  PaidAmount DECIMAL(18,2) NOT NULL CHECK (PaidAmount >= 0),
  PaidAt DATETIME2 DEFAULT SYSUTCDATETIME()
);
GO

CREATE INDEX IX_Payments_OrderId ON dbo.Payments(OrderId);
GO

-- Foreign keys (child -> parent) with standardized names
ALTER TABLE dbo.Products
  ADD CONSTRAINT FK_Products_Categories_CategoryId FOREIGN KEY (CategoryId) REFERENCES dbo.Categories(CategoryId) ON DELETE NO ACTION;
GO

ALTER TABLE dbo.Orders
  ADD CONSTRAINT FK_Orders_Customers_CustomerId FOREIGN KEY (CustomerId) REFERENCES dbo.Customers(CustomerId) ON DELETE NO ACTION;
GO

ALTER TABLE dbo.OrderItems
  ADD CONSTRAINT FK_OrderItems_Orders_OrderId FOREIGN KEY (OrderId) REFERENCES dbo.Orders(OrderId) ON DELETE NO ACTION,
      CONSTRAINT FK_OrderItems_Products_ProductId FOREIGN KEY (ProductId) REFERENCES dbo.Products(ProductId) ON DELETE NO ACTION;
GO

ALTER TABLE dbo.Payments
  ADD CONSTRAINT FK_Payments_Orders_OrderId FOREIGN KEY (OrderId) REFERENCES dbo.Orders(OrderId) ON DELETE NO ACTION;
GO

-- Trigger: maintain Orders.TotalAmount when OrderItems change
CREATE TRIGGER TRG_OrderItems_Update_Order_Total
ON dbo.OrderItems
AFTER INSERT, UPDATE, DELETE
AS
BEGIN
  SET NOCOUNT ON;

  -- Update totals for affected orders
  UPDATE o
  SET TotalAmount = ISNULL(oi.TotalOrderAmount, 0)
  FROM dbo.Orders o
  INNER JOIN (
    SELECT OrderId, SUM(LineTotal) AS TotalOrderAmount
    FROM dbo.OrderItems
    WHERE OrderId IS NOT NULL
    GROUP BY OrderId
  ) oi ON o.OrderId = oi.OrderId;
END;
GO

-- Additional helpful note: exporter UI can configure ON DELETE behavior (NO ACTION default)
-- End of schema
